apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

import java.util.Properties

// ────────────────────────────────────────────────────────────────────────────
// 1) Wczytanie pliku key.properties (zawierającego dane do podpisu release)
// ────────────────────────────────────────────────────────────────────────────
def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} else {
    println("WARNING: key.properties not found, release signing will default to debug.keystore!")
}

// ────────────────────────────────────────────────────────────────────────────
// 2) Ścieżka do katalogu głównego aplikacji i konfiguracja React Native
// ────────────────────────────────────────────────────────────────────────────
def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

react {
    entryFile = file(
      ["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"]
        .execute(null, rootDir)
        .text
        .trim()
    )
    reactNativeDir = new File(
      ["node", "--print", "require.resolve('react-native/package.json')"]
        .execute(null, rootDir)
        .text
        .trim()
    ).getParentFile().getAbsoluteFile()
    cliFile = new File(
      ["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"]
        .execute(null, rootDir)
        .text
        .trim()
    )
    bundleCommand = "export:embed"
    autolinkLibrariesWithApp()
}

// ────────────────────────────────────────────────────────────────────────────
// 3) Flagi dla ProGuarda i JSC
// ────────────────────────────────────────────────────────────────────────────
def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

// ────────────────────────────────────────────────────────────────────────────
// 4) Główna sekcja android { … }
// ────────────────────────────────────────────────────────────────────────────
android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    namespace 'com.konnar55.GrupaBukk'

    defaultConfig {
        applicationId "com.konnar55.GrupaBukk"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 4
        versionName "3.0.0"
    }

    // ─── Konfiguracja podpisywania ────────────────────────────────────────────
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (keystorePropertiesFile.exists()) {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            } else {
                // fallback do debugowego
                storeFile file('debug.keystore')
                storePassword 'android'
                keyAlias 'androiddebugkey'
                keyPassword 'android'
            }
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            shrinkResources enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    packagingOptions {
        jniLibs.useLegacyPackaging = (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
    }

    androidResources {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
    }
}

// ────────────────────────────────────────────────────────────────────────────
// 5) Zależności
// ────────────────────────────────────────────────────────────────────────────
dependencies {
    implementation("com.facebook.react:react-android")

    def isGifEnabled         = (findProperty('expo.gif.enabled')         ?: "") == "true"
    def isWebpEnabled        = (findProperty('expo.webp.enabled')        ?: "") == "true"
    def isWebpAnimatedEnabled= (findProperty('expo.webp.animated')       ?: "") == "true"

    if (isGifEnabled) {
        implementation("com.facebook.fresco:animated-gif:${reactAndroidLibs.versions.fresco.get()}")
    }
    if (isWebpEnabled) {
        implementation("com.facebook.fresco:webpsupport:${reactAndroidLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) {
            implementation("com.facebook.fresco:animated-webp:${reactAndroidLibs.versions.fresco.get()}")
        }
    }

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}
